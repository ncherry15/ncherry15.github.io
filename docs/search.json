[
  {
    "objectID": "posts/first-post/index.html",
    "href": "posts/first-post/index.html",
    "title": "Changes With the Big Ten’s Offense",
    "section": "",
    "text": "Headline: Big Ten Teams Are Running More Plays Per Game After the NCAA’s Clock Rule Change\nThe NCAA’s 2024 rule change to keep the clock running after first downs was designed to speed up games. To see whether that actually reduced the number of offensive plays, I compared the average number of plays per game for each Big Ten team across the 2024-25 and 2025-26 seasons.\nFirst I loaded the tidyverse package and imported game-by-game statistics for the 2024 and 2025 college football seasons from two CSV files.\n\n\nCode\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nseason24 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs24.csv\")\n\n\nRows: 1717 Columns: 79\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (11): Location, Opponent, Result, OT, Bowl.x, TeamURL, Outcome, Bowl.y,...\ndbl  (64): Rk, Gtm, Points, PointsOpp, PassCmp, PassAtt, PassPct, PassYds, P...\nlgl   (3): Score, TeamScore, OpponentScore\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\nseason25 &lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs25.csv\")\n\n\nRows: 711 Columns: 77\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (9): Location, Opponent, Result, OT, TeamURL, Outcome, Team, Conferenc...\ndbl  (64): Rk, Gtm, Points, PointsOpp, PassCmp, PassAtt, PassPct, PassYds, P...\nlgl   (3): Score, TeamScore, OpponentScore\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nTo focus the analysis on the Big Ten, I created a list of all 18 current conference teams. Then, I filtered the 2024 and 2025 season data to include only games played by Big Ten teams.\n\n\nCode\nbig_ten_teams &lt;- c(\"Oregon\", \"Indiana\", \"Penn State\", \"Ohio State\", \"Illinois\", \"Iowa\",  \"Michigan\",  \"Minnesota\", \"Rutgers\", \"USC\", \"Washington\", \"Nebraska\", \"Michigan State\", \"UCLA\", \"Wisconsin\", \"Northwestern\",\"Maryland\", \"Purdue\")\n\nseason24 %&gt;%\n  filter(Team %in% big_ten_teams)\n\n\n# A tibble: 235 × 79\n      Rk   Gtm Date       Location Opponent       Result Points PointsOpp OT   \n   &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;\n 1     1     1 2024-08-31 &lt;NA&gt;     Idaho          W          24        14 &lt;NA&gt; \n 2     2     2 2024-09-07 &lt;NA&gt;     Boise State    W          37        34 &lt;NA&gt; \n 3     3     3 2024-09-14 @        Oregon State   W          49        14 &lt;NA&gt; \n 4     4     4 2024-09-28 @        UCLA           W          34        13 &lt;NA&gt; \n 5     5     5 2024-10-04 &lt;NA&gt;     Michigan State W          31        10 &lt;NA&gt; \n 6     6     6 2024-10-12 &lt;NA&gt;     Ohio State     W          32        31 &lt;NA&gt; \n 7     7     7 2024-10-18 @        Purdue         W          35         0 &lt;NA&gt; \n 8     8     8 2024-10-26 &lt;NA&gt;     Illinois       W          38         9 &lt;NA&gt; \n 9     9     9 2024-11-02 @        Michigan       W          38        17 &lt;NA&gt; \n10    10    10 2024-11-09 &lt;NA&gt;     Maryland       W          39        18 &lt;NA&gt; \n# ℹ 225 more rows\n# ℹ 70 more variables: PassCmp &lt;dbl&gt;, PassAtt &lt;dbl&gt;, PassPct &lt;dbl&gt;,\n#   PassYds &lt;dbl&gt;, PassTD &lt;dbl&gt;, PassYA &lt;dbl&gt;, PassAYA &lt;dbl&gt;, PassRate &lt;dbl&gt;,\n#   RushAtt &lt;dbl&gt;, RushYds &lt;dbl&gt;, RushYA &lt;dbl&gt;, RushTD &lt;dbl&gt;, TotalPlays &lt;dbl&gt;,\n#   TotalYds &lt;dbl&gt;, TotalAvg &lt;dbl&gt;, FGA &lt;dbl&gt;, FGM &lt;dbl&gt;, XPA &lt;dbl&gt;, XPM &lt;dbl&gt;,\n#   Punt &lt;dbl&gt;, PuntYds &lt;dbl&gt;, FirstDownPass &lt;dbl&gt;, FirstDownRush &lt;dbl&gt;,\n#   FirstDownPen &lt;dbl&gt;, FirstDown &lt;dbl&gt;, Penalties &lt;dbl&gt;, PenaltyYds &lt;dbl&gt;, …\n\n\nCode\nseason25 %&gt;%\n  filter(Team %in% big_ten_teams)\n\n\n# A tibble: 91 × 77\n      Rk   Gtm Date       Location Opponent       Result Points PointsOpp OT   \n   &lt;dbl&gt; &lt;dbl&gt; &lt;date&gt;     &lt;chr&gt;    &lt;chr&gt;          &lt;chr&gt;   &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;\n 1     1     1 2025-08-30 &lt;NA&gt;     Old Dominion   W          27        14 &lt;NA&gt; \n 2     2     2 2025-09-06 &lt;NA&gt;     Kennesaw State W          56         9 &lt;NA&gt; \n 3     3     3 2025-09-12 &lt;NA&gt;     Indiana St.    W          73         0 &lt;NA&gt; \n 4     4     4 2025-09-20 &lt;NA&gt;     Illinois       W          63        10 &lt;NA&gt; \n 5     5     5 2025-09-27 @        Iowa           W          20        15 &lt;NA&gt; \n 6     1     1 2025-08-30 &lt;NA&gt;     Texas          W          14         7 &lt;NA&gt; \n 7     2     2 2025-09-06 &lt;NA&gt;     Grambling      W          70         0 &lt;NA&gt; \n 8     3     3 2025-09-13 &lt;NA&gt;     Ohio           W          37         9 &lt;NA&gt; \n 9     4     4 2025-09-27 @        Washington     W          24         6 &lt;NA&gt; \n10     5     5 2025-10-04 &lt;NA&gt;     Minnesota      W          42         3 &lt;NA&gt; \n# ℹ 81 more rows\n# ℹ 68 more variables: PassCmp &lt;dbl&gt;, PassAtt &lt;dbl&gt;, PassPct &lt;dbl&gt;,\n#   PassYds &lt;dbl&gt;, PassTD &lt;dbl&gt;, PassYA &lt;dbl&gt;, PassAYA &lt;dbl&gt;, PassRate &lt;dbl&gt;,\n#   RushAtt &lt;dbl&gt;, RushYds &lt;dbl&gt;, RushYA &lt;dbl&gt;, RushTD &lt;dbl&gt;, TotalPlays &lt;dbl&gt;,\n#   TotalYds &lt;dbl&gt;, TotalAvg &lt;dbl&gt;, FGA &lt;dbl&gt;, FGM &lt;dbl&gt;, XPA &lt;dbl&gt;, XPM &lt;dbl&gt;,\n#   Punt &lt;dbl&gt;, PuntYds &lt;dbl&gt;, FirstDownPass &lt;dbl&gt;, FirstDownRush &lt;dbl&gt;,\n#   FirstDownPen &lt;dbl&gt;, FirstDown &lt;dbl&gt;, Penalties &lt;dbl&gt;, PenaltyYds &lt;dbl&gt;, …\n\n\nNext, I calculated the average number of offensive plays per game for each Big Ten team in both the 2024 and 2025 seasons. This involved grouping the filtered data by team and taking the mean of the total plays, while making sure to ignore any missing values.\n\n\nCode\navg_plays_24 &lt;- season24 %&gt;% \n  filter(Team %in% big_ten_teams) %&gt;%\n  group_by(Team) %&gt;%\n  summarise(avg_plays = mean(TotalPlays, na.rm = TRUE))\n\navg_plays_25 &lt;- season25 %&gt;%\n  filter(Team %in% big_ten_teams) %&gt;%\n  group_by(Team) %&gt;%\n  summarise(avg_plays = mean(TotalPlays, na.rm = TRUE))\n\n\nIn this step, I created a horizontal bar chart to show the average number of offensive plays per game for each Big Ten team in the 2024 and 2025 seasons. By reordering the teams based on their average plays, I made it easier to compare teams at a glance. Flipping the coordinates with coord_flip() helped keep team names readable, especially with a long list of 18 teams. I also applied a clean theme and added axis labels and a title to make the chart easier to interpret. Overall, this visualization gives a clear snapshot of offensive tempo across the conference in both seasons.\n\n\nCode\nggplot() + \n  geom_bar(\n    data = avg_plays_24, \n    aes(x = reorder(Team, avg_plays),\n        weight = avg_plays),\n    fill = \"steelblue\") + \n  scale_y_continuous(labels = scales::comma) + \n  labs(\n    title = \"Big Ten Teams’ Average Offensive Plays Per Game (2024 Season)\",\n    x = \"Team\", \n    y = \"Average Plays\") + \n  theme_light() + \n  coord_flip()\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot() + \n  geom_bar(\n    data = avg_plays_25, \n    aes(x = reorder(Team, avg_plays),\n        weight = avg_plays),\n    fill = \"steelblue\") + \n  scale_y_continuous(labels = scales::comma) + \n  labs(\n    title = \"Big Ten Teams’ Average Offensive Plays Per Game (2025 Season)\",\n    x = \"Team\", \n    y = \"Average Plays\") + \n  theme_light() + \n  coord_flip()\n\n\n\n\n\n\n\n\n\nBig Ten teams are running slightly more offensive plays on average in the 2025 season compared to 2024, indicating a modest increase in tempo across the conference. Several teams have seen significant changes in their rankings for average plays per game. Most notably, Purdue jumped from last place in 2024 to third in 2025, while Indiana climbed from ninth to second, and Rutgers moved into the top spot after finishing second the previous year. On the other hand, Maryland, which led the conference in 2024, dropped to fifth, and Ohio State fell from 14th to last place. Other teams like USC, Penn State, and Wisconsin also dropped in the rankings, while Nebraska and Oregon remained consistently near the top. Overall, the data suggests a shift in offensive strategies for some programs, with a few accelerating their pace of play while others have slowed down."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/volleyball-waffle/index.html",
    "href": "posts/volleyball-waffle/index.html",
    "title": "What scores the points? Kills, Blocks, Aces, or Defensive Errors",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.2\n✔ ggplot2   4.0.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(waffle)\n\nmatches &lt;- read_csv(\"https://raw.githubusercontent.com/dwillis/NCAAWomensVolleyballData/main/data/ncaa_womens_volleyball_matchstats_2025.csv\")\n\n\nRows: 4878 Columns: 38\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (4): team, opponent, home_away, result\ndbl  (33): ncaa_id, team_score, opponent_score, s, kills, errors, total_atta...\ndate  (1): date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCode\nmd &lt;- matches %&gt;%\n  filter(team==\"Maryland\") %&gt;%\n  summarise(\n    total_kills = sum(kills),\n    total_blocks = sum(block_solos+block_assists),\n    total_aces = sum(aces),\n    opp_errors = sum(defensive_errors)\n  )\n\n\n\n\nCode\nmd &lt;- c(\"Kills\"=525, \"Blocks\"=216, \"Aces\"=72, \"Errors\"=257)\n\n\n\n\nCode\nwaffle(\n        md/3, \n        rows = 10, \n        title=\"Maryland's Offense\", \n        xlab=\"1 square = 1 point\", \n        colors = c(\"black\", \"red\",\"snow2\",\"gold\")\n)\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\nℹ The deprecated feature was likely used in the waffle package.\n  Please report the issue to the authors.\n\n\n\n\n\n\n\n\n\n\n\nCode\nps &lt;- matches %&gt;%\n  filter(team==\"Penn St.\") %&gt;%\n  summarise(\n    total_kills = sum(kills),\n    total_blocks = sum(block_solos+block_assists),\n    total_aces = sum(aces),\n    opp_errors = sum(defensive_errors)\n  )\n\n\n\n\nCode\nps &lt;- c(\"Kills\"=821, \"Blocks\"=234, \"Aces\"=84, \"Errors\"=286)\nmd &lt;- c(\"Kills\"=525, \"Blocks\"=216, \"Aces\"=72, \"Errors\"=257, 355)\n\n\n\n\nCode\niron(\n  waffle(\n        md/3, \n        rows = 10, \n        title=\"Maryland's Offense\", \n        xlab=\"1 square = 1 point\", \n        colors = c(\"black\", \"red\",\"snow3\",\"gold\",\"white\")\n        ),\n  waffle(\n        ps/3, \n        rows = 10, \n        title=\"Penn State's Offense\", \n        xlab=\"1 square = 1 point\", \n        colors = c(\"navy\", \"snow3\",\"grey40\",\"slategray1\")\n        )\n)\n\n\n\n\n\n\n\n\n\nMaryland scores the majority of their points through kills and opponent errors, with blocks also contributing a notable share. Their biggest area for improvement is serving, as aces make up only a small portion of their points. Nearly half of Maryland’s total points this season have come from kills, indicating a strong offensive approach but limited scoring variety.\nPenn State, on the other hand, completely outpaces Maryland — they have more points from kills alone than Maryland has from kills, blocks, and nearly all aces combined. Both teams under-perform in aces, which is typical at the Division I level, but Penn State benefits more from forcing opponent errors, suggesting stronger serves or defensive pressure.\nThese differences raise important questions about each team’s performance. Maryland’s lower number of kills may reflect challenges with offensive efficiency or setting consistency, while Penn State’s higher opponent errors could indicate stronger serving or more effective defensive pressure."
  },
  {
    "objectID": "posts/third-and-six/index.html",
    "href": "posts/third-and-six/index.html",
    "title": "College Football Third-and-Six Trends",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.2\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(cfbfastR)\nlibrary(ggalt)\n\n\nRegistered S3 methods overwritten by 'ggalt':\n  method                  from   \n  grobHeight.absoluteGrob ggplot2\n  grobWidth.absoluteGrob  ggplot2\n  grobX.absoluteGrob      ggplot2\n  grobY.absoluteGrob      ggplot2\n\n\n\n\nCode\npbp_data &lt;- load_cfb_pbp(seasons = 2021:2025)\n\n\n\n\nCode\nthird_and_six &lt;- pbp_data |&gt; \n  filter(down == 3, distance == 6)\n\n\n\n\nCode\nthird_and_six |&gt; \n  group_by(play_type)  |&gt; \n  summarize(count = n())  |&gt; \n  arrange(desc(count))\n\n\n# A tibble: 24 × 2\n   play_type                  count\n   &lt;chr&gt;                      &lt;int&gt;\n 1 Pass Reception              5026\n 2 Pass Incompletion           4020\n 3 Rush                        3397\n 4 Penalty                     1138\n 5 Timeout                      982\n 6 Sack                         825\n 7 Passing Touchdown            528\n 8 Interception Return          259\n 9 Rushing Touchdown            147\n10 Fumble Recovery (Opponent)    97\n# ℹ 14 more rows\n\n\n\n\nCode\ntotal_plays &lt;- nrow(third_and_six)\nrun_summary &lt;- third_and_six  |&gt; \n  filter(play_type == \"Rush\")  |&gt; \n  summarize(\n    total_runs = n(),\n    percent_runs = (n() / total_plays) * 100,\n    avg_yards_gained = mean(yards_gained, na.rm = TRUE)\n  )\n\n\nOf the total 16,531 plays, 3383 or 20.46% were run averaging 5.68 yards gained.\n\n\nCode\nthird_and_six  |&gt; \n  filter(play_type == \"Rush\")  |&gt; \n  group_by(season, offense_play)  |&gt; \n  summarize(run_plays = n())  |&gt; \n  arrange(desc(run_plays))\n\n\n`summarise()` has grouped output by 'season'. You can override using the\n`.groups` argument.\n\n\n# A tibble: 1,109 × 3\n# Groups:   season [5]\n   season offense_play   run_plays\n    &lt;int&gt; &lt;chr&gt;              &lt;int&gt;\n 1   2021 Army                  16\n 2   2022 Navy                  16\n 3   2021 Baylor                13\n 4   2024 Davidson              13\n 5   2022 Kennesaw State        12\n 6   2023 Air Force             12\n 7   2023 South Florida         12\n 8   2021 Arkansas              10\n 9   2021 Kent State            10\n10   2021 Louisiana             10\n# ℹ 1,099 more rows\n\n\nArmy and Navy are tied for being the teams with the most run plays in 2021 and 2022 respectively.\n\n\nCode\nmaryland_third_and_six &lt;- third_and_six  |&gt; \n  filter(offense_play == \"Maryland\")\n\n\n\n\nCode\nmaryland_third_and_six |&gt; \n  group_by(play_type)  |&gt; \n  summarize(count = n())  |&gt; \n  arrange(desc(count))\n\n\n# A tibble: 12 × 2\n   play_type                  count\n   &lt;chr&gt;                      &lt;int&gt;\n 1 Pass Reception                27\n 2 Pass Incompletion             18\n 3 Rush                          17\n 4 Penalty                        6\n 5 Sack                           4\n 6 Timeout                        4\n 7 Passing Touchdown              2\n 8 Field Goal Good                1\n 9 Fumble Recovery (Opponent)     1\n10 Fumble Return Touchdown        1\n11 Interception Return            1\n12 Rushing Touchdown              1\n\n\n\n\nCode\nmaryland_2024 &lt;- maryland_third_and_six |&gt; \n  filter(offense_play == \"Maryland\", season == 2024) |&gt; \n  group_by(play_type)  |&gt; \n  summarize(count = n())  |&gt; \n  arrange(desc(count))\n\n\n\n\nCode\ntotal_plays_24 &lt;- nrow(maryland_2024)\n\n\n\n\nCode\nmd_run_summary_24 &lt;- maryland_third_and_six  |&gt; \n  filter(play_type == \"Rush\", season == \"2024\")  |&gt; \n  summarize(\n    total_runs = n(),\n    percent_runs = (n() / total_plays_24) * 100,\n    avg_yards_gained = mean(yards_gained, na.rm = TRUE)\n  )\n\n\n\n\nCode\nmaryland_2025 &lt;- maryland_third_and_six |&gt; \n  filter(offense_play == \"Maryland\", season == \"2025\") |&gt; \n  group_by(play_type)  |&gt; \n  summarize(count = n())  |&gt; \n  arrange(desc(count))\n\n\n\n\nCode\ntotal_plays_25 &lt;- nrow(maryland_2025)\n\n\n\n\nCode\nmd_run_summary_25 &lt;- maryland_third_and_six  |&gt; \n  filter(play_type == \"Rush\", season == \"2025\")  |&gt; \n  summarize(\n    total_runs = n(),\n    percent_runs = (n() / total_plays_25) * 100,\n    avg_yards_gained = mean(yards_gained, na.rm = TRUE)\n  )\n\n\nBased on this data, Maryland does not typically run on third-and-six, they are more likely to attempt a pass play. Neither season produced an adequate run summary as there wasn’t enough data to work with. Maryland seems to aim to pass a lot more throughout this season with 14 total pass plays or attempts (incompletions) through seven games compared to last year’s 14 across the entire season.\n\n\nCode\nmaryland_third_and_six_comparison &lt;- maryland_third_and_six  |&gt; \n  filter(offense_play == \"Maryland\", season %in% c(2024, 2025))  |&gt; \n  group_by(season, play_type) |&gt; \n  summarize(count = n(), .groups = \"drop\") |&gt; \n  pivot_wider(names_from = season, values_from = count, values_fill = 0)\n\n\n\n\nCode\nggplot() + \n  geom_dumbbell(\n    data=maryland_third_and_six_comparison, \n    aes(y=play_type, x=`2024`, xend=`2025`),\n       linewidth = 1,\n    color = \"grey\",\n    colour_x = \"red\",\n    colour_xend = \"black\") + \n  theme_minimal() +\n  labs(\n    title = \"Change in Maryland’s 3rd-and-6 Play Types: 2024 vs 2025\",\n    x = \"Number of Plays\",\n    y = \"Play Type\"\n  )\n\n\nWarning in geom_dumbbell(data = maryland_third_and_six_comparison, aes(y =\nplay_type, : Ignoring unknown parameters: `linewidth`\n\n\nWarning: Using the `size` aesthetic with geom_segment was deprecated in ggplot2 3.4.0.\nℹ Please use the `linewidth` aesthetic instead.\n\n\n\n\n\n\n\n\n\nMaryland’s 3rd-and-6 tendencies have shifted slightly in 2025. Pass incompletions have increased, while pass receptions, rushes, and penalties have all declined compared to 2024. The team appears to be leaning more on the passing game overall, despite fewer successful completions, it shows more attempts given that 2025 includes only seven games. I’m interested to see if these trends could still increase over the season."
  },
  {
    "objectID": "posts/rush-wins/index.html",
    "href": "posts/rush-wins/index.html",
    "title": "Big Ten Rushing Trends: Who’s Winning on the Ground?",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.2\n✔ ggplot2   4.0.0     ✔ tibble    3.3.0\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.1.0     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nlibrary(lubridate)\n\n\nThe Big Ten is known for run-heavy football — but how often do teams win without running well? The code below identifies wins where teams rushed for under 100 yards, setting up a look at how rare those “low-rush wins” really are — and whether they’re becoming more common.\n\n\nCode\nlogs&lt;- read_csv(\"https://dwillis.github.io/sports-data-files/footballlogs1525.csv\")\n\n\nRows: 17133 Columns: 79\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (11): Location, Opponent, Result, OT, Bowl.x, TeamURL, Outcome, Bowl.y,...\ndbl  (64): Rk, Gtm, Points, PointsOpp, PassCmp, PassAtt, PassPct, PassYds, P...\nlgl   (3): Score, TeamScore, OpponentScore\ndate  (1): Date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\n#Season is the year of the game, except when played in January, then it's Year - 1\n\nlogs &lt;- logs |&gt; mutate(Season = case_when(\n  month(Date) == 1 ~ year(Date) - 1,\n  .default = year(Date)\n))\n\n\n\n\nCode\n##Take a look at the Big Ten\n\nbig10_season_games &lt;- logs |&gt; \n  filter(Conference == \"Big Ten Conference\") |&gt; \n  group_by(Season, TeamFull) |&gt; \n  summarise(all_games = n())\n\n\n`summarise()` has grouped output by 'Season'. You can override using the\n`.groups` argument.\n\n\nCode\nbig10_season_games_under_100_wins &lt;- logs |&gt; \n  filter(Conference == \"Big Ten Conference\", Result == \"W\", RushYds &lt; 100) |&gt; \n  group_by(Season, TeamFull) |&gt; \n  summarise(low_rush_wins = n())\n\n\n`summarise()` has grouped output by 'Season'. You can override using the\n`.groups` argument.\n\n\nCode\ncombined_big10_games &lt;- big10_season_games |&gt; \n  inner_join(big10_season_games_under_100_wins, join_by(Season)) |&gt; \n  mutate(pct_low_rush_wins = low_rush_wins / all_games * 100)\n\n\nWarning in inner_join(big10_season_games, big10_season_games_under_100_wins, : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 1 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\nThe chart highlights just how dominant Penn State has been, even in games where the run game stalls. While most Big Ten teams rarely win when rushing for under 100 yards, the Nittany Lions stand out for doing it more often than anyone else — recording at least one such win in nearly every season and leading the conference in low-rush victories overall.\n\n\nCode\n## Now let's dive deeper into Penn St\n\npsu_low_rush_wins &lt;- logs |&gt; \n  filter(TeamFull == \"Penn State Nittany Lions\", Result == \"W\", RushYds &lt; 100) |&gt; \n  group_by(Season) |&gt; \n  summarise(psu_low_rush_wins = n())\n\npsu_summary &lt;- logs |&gt; \n  filter(TeamFull == \"Penn State Nittany Lions\") |&gt; \n  group_by(Season) |&gt; \n  summarise(total_games = n()) |&gt; \n  inner_join(psu_low_rush_wins, join_by (Season)) |&gt; \n  mutate(pct_low_rush_wins = psu_low_rush_wins / total_games * 100)\n\n\n\n\nCode\nggplot(big10_season_games_under_100_wins, \n       aes(x = Season, y = low_rush_wins, group = TeamFull)) +\n  geom_line(color = \"gray80\", size = 1) + \n  geom_point(color = \"gray80\", size = 2) +\n  geom_line(\n    data = subset(big10_season_games_under_100_wins, TeamFull == \"Penn State Nittany Lions\"),\n    aes(x = Season, y = low_rush_wins),\n    color = \"navy\", size = 1.4\n  ) +\n  geom_point(\n    data = subset(big10_season_games_under_100_wins, TeamFull == \"Penn State Nittany Lions\"),\n    aes(x = Season, y = low_rush_wins),\n    color = \"navy\", size = 3\n  ) +\n  labs(\n    title = \"Low-Rush Wins (&lt;100 Rush Yards) by Big Ten Teams Since 2015\",\n    x = \"Season\",\n    y = \"Number of Low-Rush Wins\"\n  )\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\n\nCompared to the rest of Division I, the Big Ten continues to live up to its reputation as a ground-dominant conference. While teams across D-I rarely win games without reaching 100 rushing yards, the Big Ten sees a higher proportion of low-rush victories. This trend reinforces the conference’s continued emphasis on physical, run-heavy football. Even as low-rush wins have become slightly more common in recent years, Big Ten football remains defined by its commitment to the running game as a central element of success.\n\n\nCode\n##All NCAA Division-I Games\n\nseason_games &lt;- logs |&gt; \n  group_by(Season) |&gt; \n    summarise(all_games=n())\n\nseason_games_under_100_wins &lt;- logs |&gt;\n  filter(Result == \"W\", RushYds &lt; 100) |&gt; \n  group_by(Season) |&gt; \n    summarise(low_rush_wins=n())\n\ncombined_games &lt;- season_games |&gt; \n  inner_join(season_games_under_100_wins, join_by(Season)) |&gt; \n  mutate(pct_low_rush_wins = low_rush_wins/all_games *100)"
  }
]